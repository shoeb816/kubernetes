##############Gafana Loki & Promtail Setup for Kubernetes

This Document will help you setup Loki & Promtail in Kubernetes using helm and manual configuration file.

 
#####Gafana Loki & Promtail Setup using Helm.

1. First add the helm repo to the local repository.


[root@devopsrnd ~]# helm repo add grafana https://grafana.github.io/helm-charts

2.Then we will install it using the following command.

the below command will install loki & promtail to monitoring namespace, setup data retention to 240h & also setup a PVC for loki to persist the data stored in loki pods.(Consider Grafana,prometheus are already Installed)


[root@devopsrnd ~]#helm upgrade --install loki grafana/loki-stack --namespace=monitoring --set config.table_manager.retention_deletes_enabled=true --set config.table_manager.retention_period=240h --set grafana.enabled=false,prometheus.enabled=false,loki.persistence.enabled=true,loki.persistence.storageClassName=standard,loki.persistence.size=100Gi

3.After this go to Grafana Dashboard & add loki data-source with the following details shown below in the image.

The name can be set as per your requirement, In the url part you have to add the cluster-ip url. Since both the Grafana & Loki are in the same cluster.

http://loki.<namespace>.svc.cluster.local:3100/


4.Then you can add the following dashboard id to the Grafana ‘15141’. Import this you will get the dashboard implemented in dev Grafana.

 
##### Gafana Loki & Promtail using Manual Configuration File :

1. Generate Declarative yaml file of Grafana Loki & Promtail from Kubernetes Cluster which was setup using Helm Chart.

clusterrole-loki-promtail.yaml
clusterrole-promtail.yaml
clusterrolebinding-loki-promtail.yaml
clusterrolebinding-promtail.yaml
cm-loki-loki-stack-test.yaml
cm-loki-loki-stack.yaml
daemonset-loki-promtail.yaml
file-loki-promtail.yaml
file-loki.yaml
file-promtail.yaml
pvc-storage-loki-0.yaml
role-loki.yaml
rolebinding-loki.yaml
sa-loki-promtail.yaml
sa-loki.yaml
sa-promtail.yaml
secret-loki-promtail.yaml
secret-loki.yaml
secret-promtail.yaml
secret-sh.helm.release.v1.loki.v1.yaml
secret-sh.helm.release.v1.promtail.v1.yaml
service-loki-headless.yaml
service-loki-memberlist.yaml
service-loki.yamlstatefulset-loki.yaml
statefulset-loki.yaml

2. Open  each secret file , copy encrypted data file and after decryption with base64 ,generate file-XXX.yaml  it.

 i)For example cat  secret-loki.yaml and copy encrypted loki.yaml data from it and generate file-loki.yaml using below command.


[root@devopsrnd ~]#echo 'YXV….yAK' | base64 -d > file-loki.yaml

3.Change configuration into loki.yaml file.

 i)Add retention period for 10 days.

compactor:
  retention_enabled: true ### Add this line
limits_config:
  retention_period: 240h ###Change It

4.Apply yaml file one by one according to this list.

i)Create 3 SA account.
loki, loki-promtail, promtail

ii)Create role and rolebinding.
loki

iii)Create two  clusterrole and clusterrolebinding.
loki-promtail, promtail

iv)Create two config map.
loki-loki-stack, loki-loki-stack-test

v)Create 5 secret.
secret-loki-promtail (datafile file-loki-promtail.yaml),  secret-loki(datafile file-loki.yaml),  secret-promtail (datafile file-promtail),  secret-sh.helm.release.v1.loki.v1, secret-sh.helm.release.v1.promtail.v1
 

vi)Create 1 persistent volume claim of 300GB
storage-loki-0
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 300Gi ### Change IT
 

vii)Create DaemonSet and StateFulSet
loki-promtail, loki
 

5)After this go to Grafana Dashboard & add loki data-source with the following details shown below in the image.

i)The name can be set as per your requirement, In the url part you have to add the cluster-ip url. Since both the Grafana & Loki are in the same cluster.


For example
URL http://loki.monitoring.svc.cluster.local:3100/

Go to the Loki Kubernetes Logs/Setting and add pods variable in variable section with below parameters and Click on Run Query to see all pods name are visible in Preview of values.


Select variable type
Query ### Select It

General
Name
The name of the template variable. (Max. 50 characters)
pods ### Write It

Query options
Data source
Loki ### Select It

Custom all value
.+ ### Write It

Preview of values
### Check the changes after click on Run Query
 

ii)Click Right button on Graph Window and edit the query section with below parameters and click on Run queries.



sum(count_over_time({namespace=~"$namespace", stream=~"$stream", container =~"$container"} |= "$query" [$__interval]))

 

iii)Similarly Edit query option of the Log window and On Time Under Logs menu at the Right Middle side for timestamp.


{namespace=~"$namespace", stream=~"$stream", container =~"$container"} |= "$query"


6)Now you can see the Graph and Logs with appropriate parameters.:slight_smile: 